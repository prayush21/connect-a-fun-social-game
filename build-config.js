#!/usr/bin/env node

/**
 * Build script to generate Firebase configuration from environment variables
 * This ensures sensitive config data is not committed to version control
 */

const fs = require("fs");
const path = require("path");

// Load environment variables from .env file if it exists
if (fs.existsSync(".env")) {
  require("dotenv").config();
}

// Required Firebase configuration keys
const requiredKeys = [
  "FIREBASE_API_KEY",
  "FIREBASE_AUTH_DOMAIN",
  "FIREBASE_PROJECT_ID",
  "FIREBASE_STORAGE_BUCKET",
  "FIREBASE_MESSAGING_SENDER_ID",
  "FIREBASE_APP_ID",
];

// Optional Firebase configuration keys
const optionalKeys = ["FIREBASE_MEASUREMENT_ID"];

function validateEnvironment() {
  const missing = [];

  for (const key of requiredKeys) {
    if (!process.env[key]) {
      missing.push(key);
    }
  }

  if (missing.length > 0) {
    console.error("‚ùå Missing required environment variables:");
    missing.forEach((key) => console.error(`   - ${key}`));
    console.error(
      "\nüí° Please check your .env file or environment configuration"
    );
    console.error("   Example: cp .env.example .env");
    process.exit(1);
  }
}

function generateConfig() {
  console.log("üîß Generating Firebase configuration...");

  const config = {
    apiKey: process.env.FIREBASE_API_KEY,
    authDomain: process.env.FIREBASE_AUTH_DOMAIN,
    projectId: process.env.FIREBASE_PROJECT_ID,
    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.FIREBASE_APP_ID,
  };

  // Add optional keys if they exist
  if (process.env.FIREBASE_MEASUREMENT_ID) {
    config.measurementId = process.env.FIREBASE_MEASUREMENT_ID;
  }

  const configContent = `// Firebase Configuration - Auto-generated from environment variables
// DO NOT EDIT THIS FILE DIRECTLY - Edit your .env file instead
// This file is generated by build-config.js

export const firebaseConfig = ${JSON.stringify(config, null, 2)};

// Environment info
export const environment = "${process.env.NODE_ENV || "development"}";
export const buildTime = "${new Date().toISOString()}";
`;

  // Ensure public directory exists
  const publicDir = path.join(__dirname, "public");
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  // Write config file
  const configPath = path.join(publicDir, "config.js");
  fs.writeFileSync(configPath, configContent);

  console.log("‚úÖ Firebase configuration generated successfully!");
  console.log(`üìç Location: ${configPath}`);
  console.log(`üéØ Project: ${config.projectId}`);
  console.log(`üåç Environment: ${process.env.NODE_ENV || "development"}`);
}

function main() {
  console.log("üöÄ Building Firebase configuration...\n");

  validateEnvironment();
  generateConfig();

  console.log("\nüéâ Build complete!");
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { validateEnvironment, generateConfig };
